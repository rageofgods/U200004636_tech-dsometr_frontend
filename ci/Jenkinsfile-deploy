def BUILD_ENVIRONMENT = ""
def DEPLOY_ENVIRONMENT = ""
def RH_REGISTRY = ""
def RH_REGISTRY_CRED_ID = ""
def REGISTRY = ""
def REGISTRY_CRED_ID = ""
def OCP_URL_TARGET = ""
def OCP_CRED_ID = ""
def OCP_NAMESPACE = ""
def OCP_APP_NAME = ""
def OCP_APP_BASE_URL = ""          
def OCP_IMAGE_STREAM = ""
def OCP_TEMPLATE_NAME = ""
def GIT_BASE_URL = ""
def GIT_CRED_ID = ""
def DOCKER_FILE_NAME = ""

withFolderProperties{
    BUILD_ENVIRONMENT = "${env.BUILD_ENVIRONMENT}"
    DEPLOY_ENVIRONMENT = "${env.DEPLOY_ENVIRONMENT}"
    RH_REGISTRY = "${env.RH_REGISTRY}"
    RH_REGISTRY_CRED_ID = "${env.RH_REGISTRY_CRED_ID}"
    REGISTRY = "${env.REGISTRY}"
    REGISTRY_CRED_ID = "${env.REGISTRY_CRED_ID}"
    OCP_URL_TARGET = "${env.OCP_URL_TARGET}"
    OCP_CRED_ID = "${env.OCP_CRED_ID}"
    OCP_NAMESPACE = "${env.OCP_NAMESPACE}"
    OCP_APP_NAME = "${env.OCP_APP_NAME}"
    OCP_APP_BASE_URL = "${env.OCP_APP_BASE_URL}"
    OCP_IMAGE_STREAM = "${env.OCP_IMAGE_STREAM}"
    OCP_TEMPLATE_NAME = "${env.OCP_TEMPLATE_NAME}"
    GIT_BASE_URL = "${env.GIT_BASE_URL}"
    GIT_CRED_ID = "${env.GIT_CRED_ID}"
    DOCKER_FILE_NAME = "${env.DOCKER_FILE_NAME}"
}

if (DEPLOY_ENVIRONMENT == '' || DEPLOY_ENVIRONMENT == null || DEPLOY_ENVIRONMENT == 'null') {
    currentBuild.result = 'ABORTED'
    error('Not defined DEPLOY_ENVIRONMENT in Folder properies plugin!')
}
if (OCP_APP_NAME == '' || OCP_APP_NAME == null || OCP_APP_NAME == 'null') {
    currentBuild.result = 'ABORTED'
    error('Not defined OCP_APP_NAME in Folder properies plugin!')
}

pipeline {
    agent {
        label "${DEPLOY_ENVIRONMENT}"
    }

    environment {
        BUILD_ENVIRONMENT = "${BUILD_ENVIRONMENT}"
        DEPLOY_ENVIRONMENT = "${DEPLOY_ENVIRONMENT}"
        RH_REGISTRY = "${RH_REGISTRY}"
        RH_REGISTRY_CRED_ID = "${RH_REGISTRY_CRED_ID}"
        REGISTRY = "${REGISTRY}"
        REGISTRY_CRED_ID = "${REGISTRY_CRED_ID}"
        OCP_URL_TARGET = "${OCP_URL_TARGET}"
        OCP_CRED_ID = "${OCP_CRED_ID}"
        OCP_NAMESPACE = "${OCP_NAMESPACE}"
        OCP_APP_NAME = "${OCP_APP_NAME}"
        OCP_APP_BASE_URL = "${OCP_APP_BASE_URL}"  
        OCP_IMAGE_STREAM = "${OCP_IMAGE_STREAM}"
        OCP_TEMPLATE_NAME = "${OCP_TEMPLATE_NAME}"
        GIT_BASE_URL = "${GIT_BASE_URL}"
        GIT_CRED_ID = "${GIT_CRED_ID}"
        DOCKER_FILE_NAME = "${DOCKER_FILE_NAME}"
        GIT_COMMIT_SHORT = sh(
            script: "printf \$(git rev-parse --short ${GIT_COMMIT})",
            returnStdout: true
        )
    }
    stages {
        stage("OCP login") {
            steps {
                echo "=====ocp login====="
                withCredentials([string(credentialsId: "$OCP_CRED_ID", variable: 'TOKEN')]) {
                    sh """
                    oc login $OCP_URL_TARGET --token $TOKEN
                    """
                }
            }
        }
        stage("OCP init image stream and teamplate") {
            steps {
                echo "=====ocp login====="
                    sh """
                    oc apply -f $OCP_IMAGE_STREAM
                    oc apply -f $OCP_TEMPLATE_NAME
                    """
            }
        }
        stage("OCP deploy") {
            steps {
                echo "=====ocp tag new image as latest====="
                    sh """
                    oc tag $REGISTRY/$OCP_APP_NAME:$GIT_COMMIT_SHORT $OCP_APP_NAME:latest
                    """
            }
        }
        stage("OCP create new app from the template") {
            when {
                not {
                    expression {
                        def status = sh(script: "oc get all --selector app=$OCP_APP_NAME | grep Running", returnStatus: true) 
                        if (status != 0) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                }
            }
            steps {
                echo "=====ocp create application====="
                    sh """
                    oc new-app --template=$OCP_APP_NAME
                    """
            }
        }
        stage("OCP get status") {
            steps {
                echo "=====Waiting 15 second to build process catch-up====="
                sleep(time:15,unit:"SECONDS")
                echo "=====ocp get podes====="
                    sh """
                    oc get pods | grep -E "$OCP_APP_NAME.+[1-99]\\/[1-99]\\s+Running"
                    """
            }
        }
        stage("Application check") {
            steps {
                echo "=====getting application status====="
                    sh """
                    curl -v --silent https://${OCP_APP_NAME}-${OCP_NAMESPACE}.${OCP_APP_BASE_URL} 2>&1 | grep "Hello World"
                    """
            }
        }
    }
}