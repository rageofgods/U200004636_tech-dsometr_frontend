#!groovy

withFolderProperties{
    // Required parameters
    OCP_NAMESPACE = "${env.OCP_NAMESPACE}"
    REGISTRY_TRUST = "${env.REGISTRY_TRUST}"
    REGISTRY_TRUST_CRED_ID = "${env.REGISTRY_TRUST_CRED_ID}"
    REGISTRY_DEV = "${env.REGISTRY_DEV}"
    REGISTRY_DEV_CRED_ID = "${env.REGISTRY_DEV_CRED_ID}"
    // Additional parameters
    RH_REGISTRY_TRUST = "${env.RH_REGISTRY_TRUST}"
    RH_REGISTRY_TRUST_CRED_ID = "${env.RH_REGISTRY_TRUST_CRED_ID}" 
    RH_REGISTRY_DEV = "${env.RH_REGISTRY_DEV}"
    RH_REGISTRY_DEV_CRED_ID = "${env.RH_REGISTRY_DEV_CRED_ID}" 
    DOCKERFILE_NAME = "${env.DOCKERFILE_NAME}"
    PYPI_BASE_URL_TRUST = "${env.PYPI_BASE_URL_TRUST}"
    PYPI_PATH_URL_TRUST = "${env.PYPI_PATH_URL_TRUST}"
    PYPI_TRUSTED_HOST_TRUST = "${env.PYPI_TRUSTED_HOST_TRUST}"
    PYPI_BASE_URL_DEV = "${env.PYPI_BASE_URL_DEV}"
    PYPI_PATH_URL_DEV = "${env.PYPI_PATH_URL_DEV}"
    PYPI_TRUSTED_HOST_DEV = "${env.PYPI_TRUSTED_HOST_DEV}"
}

if (BUILD_ENVIRONMENT == 'trust') {
    REGISTRY = REGISTRY_TRUST
    REGISTRY_CRED_ID = REGISTRY_TRUST_CRED_ID
    RH_REGISTRY = RH_REGISTRY_TRUST
    RH_REGISTRY_CRED_ID = RH_REGISTRY_TRUST_CRED_ID
    PYPI_BASE_URL = PYPI_BASE_URL_TRUST
    PYPI_PATH_URL = PYPI_PATH_URL_TRUST
    PYPI_TRUSTED_HOST = PYPI_TRUSTED_HOST_TRUST
}
 
if (BUILD_ENVIRONMENT == 'dev') {
    REGISTRY = REGISTRY_DEV
    REGISTRY_CRED_ID = REGISTRY_DEV_CRED_ID
    RH_REGISTRY = RH_REGISTRY_DEV
    RH_REGISTRY_CRED_ID = RH_REGISTRY_DEV_CRED_ID
    PYPI_BASE_URL = PYPI_BASE_URL_DEV
    PYPI_PATH_URL = PYPI_PATH_URL_DEV
    PYPI_TRUSTED_HOST = PYPI_TRUSTED_HOST_DEV
}


pipeline {
    agent {
        label "${BUILD_ENVIRONMENT}"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    environment {
        GIT_COMMIT_SHORT = sh(
            script: "printf \$(git rev-parse --short ${GIT_COMMIT})",
            returnStdout: true
        )
    }

    stages {
        /*stage ("Print env") {
            steps {
                sh 'printenv'
            }
        }*/
        stage("Set build name") {
            steps {
                // use name of the patchset as the build name
                wrap([$class: 'BuildUser']){
                    script {
                        if ("${params.BRANCH}" == 'null'){
                            buildName "$BUILD_NUMBER-$GIT_COMMIT_SHORT"
                            }
                        else {
                            buildName "$BUILD_NUMBER-$BUILD_ENVIRONMENT-${params.BRANCH}-$GIT_COMMIT_SHORT"
                            }
                            }
                //buildName "$BUILD_NUMBER-$GIT_COMMIT_SHORT"
                    buildDescription "Executed @ ${NODE_NAME}. Build started by ${BUILD_USER}"
                }
            }
        }

        stage("Docker registry login") {
            steps {
                echo "=====docker login registry====="
                withCredentials([usernamePassword(credentialsId: "$REGISTRY_CRED_ID", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login $REGISTRY -u $USERNAME -p $PASSWORD
                    """
                }
                withCredentials([usernamePassword(credentialsId: "$RH_REGISTRY_CRED_ID", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login $RH_REGISTRY -u $USERNAME -p $PASSWORD
                    """
                }
            }
        }
        stage("Docker build image") {
            steps {
                echo "=====docker build====="
                sh """
                docker build -t $REGISTRY/$OCP_NAMESPACE/$OCP_APP_NAME:$GIT_COMMIT_SHORT -f $DOCKERFILE_NAME \
                    --build-arg RH_REGISTRY_ARG=${RH_REGISTRY} \
                    --build-arg BUILD_NUMBER_ARG=${env.BUILD_TAG} \
                    --build-arg PYPI_BASE_URL_ARG=$PYPI_BASE_URL \
                    --build-arg PYPI_PATH_URL_ARG=$PYPI_PATH_URL \
                    --build-arg PYPI_TRUSTED_HOST_ARG=$PYPI_TRUSTED_HOST .
                """
            }
        }
        stage("Docker push image") {
            steps {
                echo "=====docker login and push====="
                sh """
                docker push $REGISTRY/$OCP_NAMESPACE/$OCP_APP_NAME:$GIT_COMMIT_SHORT
                """
            }
        }
    }
}